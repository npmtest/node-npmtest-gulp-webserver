{"/home/travis/build/npmtest/node-npmtest-gulp-webserver/test.js":"/* istanbul instrument in package npmtest_gulp_webserver */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-webserver/lib.npmtest_gulp_webserver.js":"/* istanbul instrument in package npmtest_gulp_webserver */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_webserver = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_webserver = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-webserver/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-webserver && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_webserver */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_webserver\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_webserver.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_webserver.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_webserver.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_webserver.__dirname +\n                    '/lib.npmtest_gulp_webserver.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-webserver/gulp-webserver/src/index.js":"var through = require('through2');\nvar gutil = require('gulp-util');\nvar http = require('http');\nvar https = require('https');\nvar connect = require('connect');\nvar serveStatic = require('serve-static');\nvar connectLivereload = require('connect-livereload');\nvar proxy = require('proxy-middleware');\nvar tinyLr = require('tiny-lr');\nvar watch = require('watch');\nvar fs = require('fs');\nvar serveIndex = require('serve-index');\nvar path = require('path');\nvar open = require('open');\nvar url = require('url');\nvar extend = require('node.extend');\nvar enableMiddlewareShorthand = require('./enableMiddlewareShorthand');\nvar isarray = require('isarray');\n\n\nmodule.exports = function(options) {\n\n  var defaults = {\n\n    /**\n     *\n     * BASIC DEFAULTS\n     *\n     **/\n\n    host: 'localhost',\n    port: 8000,\n    path: '/',\n    fallback: false,\n    https: false,\n    open: false,\n\n    /**\n     *\n     * MIDDLEWARE DEFAULTS\n     *\n     * NOTE:\n     *  All middleware should defaults should have the 'enable'\n     *  property if you want to support shorthand syntax like:\n     *\n     *    webserver({\n     *      livereload: true\n     *    });\n     *\n     */\n\n    // Middleware: Livereload\n    livereload: {\n      enable: false,\n      port: 35729,\n      filter: function (filename) {\n        if (filename.match(/node_modules/)) {\n          return false;\n        } else { return true; }\n      }\n    },\n\n    // Middleware: Directory listing\n    // For possible options, see:\n    //  https://github.com/expressjs/serve-index\n    directoryListing: {\n      enable: false,\n      path: './',\n      options: undefined\n    },\n\n    // Middleware: Proxy\n    // For possible options, see:\n    //  https://github.com/andrewrk/connect-proxy\n    proxies: []\n\n  };\n\n  // Deep extend user provided options over the all of the defaults\n  // Allow shorthand syntax, using the enable property as a flag\n  var config = enableMiddlewareShorthand(defaults, options, [\n    'directoryListing',\n    'livereload'\n  ]);\n\n  if (typeof config.open === 'string' && config.open.length > 0 && config.open.indexOf('http') !== 0) {\n    // ensure leading slash if this is NOT a complete url form\n    config.open = (config.open.indexOf('/') !== 0 ? '/' : '') + config.open;\n  }\n\n  var app = connect();\n\n  var openInBrowser = function() {\n    if (config.open === false) return;\n    if (typeof config.open === 'string' && config.open.indexOf('http') === 0) {\n      // if this is a complete url form\n      open(config.open);\n      return;\n    }\n    open('http' + (config.https ? 's' : '') + '://' + config.host + ':' + config.port + (typeof config.open === 'string' ? config.open : ''));\n  };\n\n  var lrServer;\n\n  if (config.livereload.enable) {\n\n    app.use(connectLivereload({\n      port: config.livereload.port\n    }));\n\n    if (config.https) {\n      if (config.https.pfx) {\n        lrServer = tinyLr({\n          pfx: fs.readFileSync(config.https.pfx),\n          passphrase: config.https.passphrase\n        });\n      }\n      else {\n        lrServer = tinyLr({\n          key: fs.readFileSync(config.https.key || __dirname + '/../ssl/dev-key.pem'),\n          cert: fs.readFileSync(config.https.cert || __dirname + '/../ssl/dev-cert.pem')\n        });\n      }\n    } else {\n      lrServer = tinyLr();\n    }\n\n    lrServer.listen(config.livereload.port, config.host);\n\n  }\n\n  // middlewares\n  if (typeof config.middleware === 'function') {\n    app.use(config.middleware);\n  } else if (isarray(config.middleware)) {\n    config.middleware\n      .filter(function(m) { return typeof m === 'function'; })\n      .forEach(function(m) {\n        app.use(m);\n      });\n  }\n\n  // Proxy requests\n  for (var i = 0, len = config.proxies.length; i < len; i++) {\n    var proxyoptions = url.parse(config.proxies[i].target);\n    if (config.proxies[i].hasOwnProperty('options')) {\n      extend(proxyoptions, config.proxies[i].options);\n    }\n    app.use(config.proxies[i].source, proxy(proxyoptions));\n  }\n\n  if (config.directoryListing.enable) {\n    app.use(config.path, serveIndex(path.resolve(config.directoryListing.path), config.directoryListing.options));\n  }\n\n\n  var files = [];\n\n  // Create server\n  var stream = through.obj(function(file, enc, callback) {\n\n    app.use(config.path, serveStatic(file.path));\n\n    if (config.livereload.enable) {\n      var watchOptions = {\n        ignoreDotFiles: true,\n        filter: config.livereload.filter\n      };\n      watch.watchTree(file.path, watchOptions, function (filename) {\n        lrServer.changed({\n          body: {\n            files: filename\n          }\n        });\n\n      });\n    }\n\n    this.push(file);\n    callback();\n  })\n  .on('data', function(f){files.push(f);})\n  .on('end', function(){\n    if (config.fallback) {\n      files.forEach(function(file){\n        var fallbackFile = file.path + '/' + config.fallback;\n        if (fs.existsSync(fallbackFile)) {\n          app.use(function(req, res) {\n            res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n            fs.createReadStream(fallbackFile).pipe(res);\n          });\n        }\n      });\n    }\n  });\n\n  var webserver;\n\n  if (config.https) {\n    var opts;\n\n    if (config.https.pfx) {\n      opts = {\n        pfx: fs.readFileSync(config.https.pfx),\n        passphrase: config.https.passphrase\n      };\n    } else {\n      opts = {\n        key: fs.readFileSync(config.https.key || __dirname + '/../ssl/dev-key.pem'),\n        cert: fs.readFileSync(config.https.cert || __dirname + '/../ssl/dev-cert.pem')\n      };\n    }\n    webserver = https.createServer(opts, app).listen(config.port, config.host, openInBrowser);\n  } else {\n    webserver = http.createServer(app).listen(config.port, config.host, openInBrowser);\n  }\n\n  gutil.log('Webserver started at', gutil.colors.cyan('http' + (config.https ? 's' : '') + '://' + config.host + ':' + config.port));\n\n  stream.on('kill', function() {\n\n    webserver.close();\n\n    if (config.livereload.enable) {\n      lrServer.close();\n    }\n\n  });\n\n  return stream;\n\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-webserver/gulp-webserver/src/enableMiddlewareShorthand/index.js":"var extend = require('node.extend');\n\n// TODO: Make this its own npm module and repo\nmodule.exports = function(defaults, options, props)\n{\n  var originalDefaults = extend(true, {},defaults);\n  var config = extend(true, defaults, options);\n\n  // If we get a single string, convert it to a single item array\n  if(Object.prototype.toString.call(props) == '[object String]') {\n    props = [props];\n  }\n\n  // Loop through all of the given middlewares\n  for (var i = 0, len = props.length; i < len; i++) {\n    var prop = props[i];\n    // If using the shorthand syntax\n    if (config[prop] === true) {\n      // Replace the given tree for the tree defaults\n      config[prop] = extend(true, {}, originalDefaults[prop]);\n      // Set the enable flag, which then can be reliably used for conditionals\n      config[prop].enable = true;\n    }\n  }\n  return config;\n};"}